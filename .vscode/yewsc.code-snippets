{
    "Advent of Code skeleton": {
        "prefix": "aoc",
        "body": [
            "fn main() {",
            "    let input = String::from_utf8_lossy(include_bytes!(\"../input/day_${1:DayNumber}.txt\"));",
            "    let first = day_${1}_1(&input);",
            "    println!(\"{:?}\", first);",
            "    let second = day_${1}_2(&input);",
            "    println!(\"{:?}\", second);",
            "}",
            "",
            "fn day_${1}_1(input: &str) -> usize {",
            "    unimplemented!()",
            "}",
            "",
            "fn day_${1}_2(input: &str) -> usize {",
            "    unimplemented!()",
            "}",
            "",
            "#[test]",
            "fn test_day_${1}_1() {",
            "    let input = r#\"\"#;",
            "    assert_eq!(day_${1}_1(input), 1);",
            "}",
            "",
            "#[test]",
            "fn test_day_${1}_2() {",
            "    let input = r#\"\"#;",
            "    assert_eq!(day_${1}_2(input), 1);",
            "}",
            "",
            "#[test]",
            "fn test_day_${1}_1_answer() {",
            "    let input = String::from_utf8_lossy(include_bytes!(\"../input/day_${1}.txt\"));",
            "    assert_eq!(day_${1}_1(&input), 1);",
            "}",
            "",
            "#[test]",
            "fn test_day_${1}_2_answer() {",
            "    let input = String::from_utf8_lossy(include_bytes!(\"../input/day_${1}.txt\"));",
            "    assert_eq!(day_${1}_2(&input), 1);",
            "}",
        ],
        "description": "Create a new Advent of Code day solution"
    }
}